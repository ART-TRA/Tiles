[{"D:\\DigitalLinks\\links\\src\\index.js":"1","D:\\DigitalLinks\\links\\src\\App.js":"2","D:\\DigitalLinks\\links\\src\\reportWebVitals.js":"3","D:\\DigitalLinks\\links\\src\\linkState.js":"4","D:\\DigitalLinks\\links\\src\\linkReducer.js":"5","D:\\DigitalLinks\\links\\src\\AppStyle.js":"6","D:\\DigitalLinks\\links\\src\\AddForm.jsx":"7"},{"size":534,"mtime":1611214227249,"results":"8","hashOfConfig":"9"},{"size":8308,"mtime":1611222678465,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"9"},{"size":4241,"mtime":1611179280401,"results":"12","hashOfConfig":"9"},{"size":1869,"mtime":1611179280417,"results":"13","hashOfConfig":"9"},{"size":1484,"mtime":1611223275526,"results":"14","hashOfConfig":"9"},{"size":3351,"mtime":1611222389365,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"qnvnrv",{"filePath":"19","messages":"20","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"18"},"D:\\DigitalLinks\\links\\src\\index.js",[],["33","34"],"D:\\DigitalLinks\\links\\src\\App.js",["35","36","37","38","39","40","41","42","43","44","45","46","47","48"],"import React, {useContext, useEffect, useState} from 'react';\nimport List from '@material-ui/core/List';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport WorkIcon from '@material-ui/icons/Work';\nimport SportsEsportsIcon from '@material-ui/icons/SportsEsports';\nimport PlayCircleOutlineIcon from '@material-ui/icons/PlayCircleOutline';\nimport MovieIcon from '@material-ui/icons/Movie';\nimport GradeIcon from '@material-ui/icons/Grade';\nimport Link from \"@material-ui/core/Link\";\nimport Card from \"@material-ui/core/Card\";\nimport {CardContent, useTheme} from \"@material-ui/core\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport {LinkContext} from \"./linkState\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport PlaylistAddIcon from '@material-ui/icons/PlaylistAdd';\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport TextField from \"@material-ui/core/TextField\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport {\n    AppContent,\n    HideToolbar,\n    LinkContent,\n    Root,\n    StyledAppBar,\n    StyledDrawer,\n    StyledFormControl,\n    StyledToolbar,\n    StyledTooltip,\n    useStyles\n} from \"./AppStyle\";\nimport {AddForm} from \"./AddForm\";\n\n\nexport const groups = [\n    {\n        name: \"All\",\n        icon: <GradeIcon/>,\n    },\n    {\n        name: \"Work\",\n        icon: <WorkIcon/>,\n    },\n    {\n        name: \"Games\",\n        icon: <SportsEsportsIcon/>,\n    },\n    {\n        name: \"Music\",\n        icon: <PlayCircleOutlineIcon/>,\n    },\n    {\n        name: \"Movies\",\n        icon: <MovieIcon/>,\n    },\n]\n\nconst App = () => {\n    const {filterLinks, links, currentLink, addLink, setLinks} = useContext(LinkContext)\n    const classes = useStyles();\n    // const [linkName, setLinkName] = useState(\"\")\n    // const [linkHref, setLinkHref] = useState(\"\")\n    const [open, setOpen] = useState(false);\n    // const [groupName, setGroupName] = useState('');\n    const [findLink, setFindLink] = useState('');\n    useEffect(() => {\n        const storageLinks = JSON.parse(localStorage.getItem('links'))\n        setLinks(storageLinks)\n    }, [])\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n    const handleClose = () => {\n        setOpen(false);\n    };\n    // const handleChange = (event) => {\n    //     setGroupName(event.target.value);\n    // };\n    const handleOpen = () => {\n        setOpen(true);\n    };\n\n    return (\n        <Root>\n            <StyledAppBar position=\"fixed\" color=\"inherit\">\n                <StyledToolbar>\n                    <Typography variant=\"h6\" noWrap>\n                        {currentLink} links\n                    </Typography>\n                    <AppContent>\n                        <TextField\n                            label=\"Search\"\n                            variant=\"outlined\"\n                            margin=\"dense\"\n                            id=\"findLink\"\n                            onChange={e => setFindLink(e.target.value)}\n                            value={findLink}\n                        />\n                        <StyledTooltip title=\"add link\" placement=\"top\">\n                            <IconButton onClick={handleClickOpen}>\n                                <PlaylistAddIcon/>\n                            </IconButton>\n                        </StyledTooltip>\n                    </AppContent>\n                    <AddForm open={open} handleOpen={handleOpen} handleClose={handleClose}/>\n\n                    {/*<Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">*/}\n                    {/*    <DialogTitle id=\"form-dialog-title\">Add link</DialogTitle>*/}\n                    {/*    <DialogContent>*/}\n                    {/*        <TextField*/}\n                    {/*            margin=\"dense\"*/}\n                    {/*            id=\"linkName\"*/}\n                    {/*            label=\"Link name\"*/}\n                    {/*            type=\"name\"*/}\n                    {/*            fullWidth*/}\n                    {/*            onChange={e => setLinkName(e.target.value)}*/}\n                    {/*            value={linkName}*/}\n                    {/*        />*/}\n                    {/*        <TextField*/}\n                    {/*            margin=\"dense\"*/}\n                    {/*            id=\"linkHref\"*/}\n                    {/*            label=\"Link href\"*/}\n                    {/*            type=\"href\"*/}\n                    {/*            fullWidth*/}\n                    {/*            onChange={e => setLinkHref(e.target.value)}*/}\n                    {/*            value={linkHref}*/}\n                    {/*        />*/}\n                    {/*        <StyledFormControl>*/}\n                    {/*            <InputLabel id=\"open-select-label\">Group</InputLabel>*/}\n                    {/*            <Select*/}\n                    {/*                labelId=\"open-select-label\"*/}\n                    {/*                id=\"open-select\"*/}\n                    {/*                onOpen={handleOpen}*/}\n                    {/*                value={groupName}*/}\n                    {/*                onChange={handleChange}*/}\n                    {/*            >*/}\n                    {/*                {groups.map((group, index) => {*/}\n                    {/*                    if (group.name !== \"All\") {*/}\n                    {/*                        return <MenuItem key={index} value={group.name}>{group.name}</MenuItem>*/}\n                    {/*                    }*/}\n                    {/*                })}*/}\n                    {/*            </Select>*/}\n                    {/*        </StyledFormControl>*/}\n                    {/*    </DialogContent>*/}\n                    {/*    <DialogActions>*/}\n                    {/*        <Button variant=\"outlined\" onClick={() => {*/}\n                    {/*            addLink(linkName, linkHref, groupName)*/}\n                    {/*            handleClose()*/}\n                    {/*        }} color=\"primary\">*/}\n                    {/*            Add Link*/}\n                    {/*        </Button>*/}\n                    {/*    </DialogActions>*/}\n                    {/*</Dialog>*/}\n\n\n                </StyledToolbar>\n            </StyledAppBar>\n            <StyledDrawer variant=\"permanent\" anchor=\"left\">\n                {/*<div className={classes.toolbar} />*/}\n                <HideToolbar/>\n                <Divider/>\n                <List style={{width: 240}}>\n                    {groups.map(item => <ListItem button key={item.name} onClick={() => filterLinks(item.name)}>\n                        <ListItemIcon>{item.icon}</ListItemIcon>\n                        <ListItemText primary={item.name}/>\n                    </ListItem>)}\n                </List>\n            </StyledDrawer>\n            <LinkContent>\n                {/*<div className={classes.toolbar} />*/}\n                <HideToolbar/>\n                {links.filter(val => {\n                    if (findLink === \"\") {\n                        return val\n                    } else if (val.name.toLowerCase().includes(findLink.toLowerCase())) {\n                        return val\n                    }\n                }).map((link, index) =>\n                    link.visible ?\n                        <Card key={index} style={{marginBottom: 5, boxShadow: \"none\"}}>\n                            <CardActionArea>\n                                <CardContent>\n                                    <Typography>{link.name}</Typography>\n                                    <Link href={link.link}>{link.link}</Link>\n                                </CardContent>\n                            </CardActionArea>\n                        </Card> : null)}\n            </LinkContent>\n        </Root>\n    );\n}\n\nexport default App;\n","D:\\DigitalLinks\\links\\src\\reportWebVitals.js",[],"D:\\DigitalLinks\\links\\src\\linkState.js",[],"D:\\DigitalLinks\\links\\src\\linkReducer.js",[],"D:\\DigitalLinks\\links\\src\\AppStyle.js",[],"D:\\DigitalLinks\\links\\src\\AddForm.jsx",["49"],"import DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {StyledFormControl} from \"./AppStyle\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport React, {useContext, useState} from \"react\";\r\nimport {LinkContext} from \"./linkState\";\r\nimport {groups} from \"./App\";\r\n\r\nexport const AddForm = ({open, handleClose, handleOpen}) => {\r\n    const {addLink} = useContext(LinkContext)\r\n    const [linkName, setLinkName] = useState(\"\")\r\n    const [linkHref, setLinkHref] = useState(\"\")\r\n    const [groupName, setGroupName] = useState('');\r\n\r\n    const handleChange = (event) => {\r\n        setGroupName(event.target.value);\r\n    };\r\n    // const handleOpen = () => {\r\n    //     setOpen(true);\r\n    // };\r\n    // const handleClose = () => {\r\n    //     setOpen(false);\r\n    // };\r\n    return (\r\n        <div>\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n                <DialogTitle id=\"form-dialog-title\">Add link</DialogTitle>\r\n                <DialogContent>\r\n                    <TextField\r\n                        margin=\"dense\"\r\n                        id=\"linkName\"\r\n                        label=\"Link name\"\r\n                        type=\"name\"\r\n                        fullWidth\r\n                        onChange={e => setLinkName(e.target.value)}\r\n                        value={linkName}\r\n                    />\r\n                    <TextField\r\n                        margin=\"dense\"\r\n                        id=\"linkHref\"\r\n                        label=\"Link href\"\r\n                        type=\"href\"\r\n                        fullWidth\r\n                        onChange={e => setLinkHref(e.target.value)}\r\n                        value={linkHref}\r\n                    />\r\n                    <StyledFormControl>\r\n                        <InputLabel id=\"open-select-label\">Group</InputLabel>\r\n                        <Select\r\n                            labelId=\"open-select-label\"\r\n                            id=\"open-select\"\r\n                            onOpen={handleOpen}\r\n                            value={groupName}\r\n                            onChange={handleChange}\r\n                        >\r\n                            {groups.map((group, index) => {\r\n                                if (group.name !== \"All\") {\r\n                                    return <MenuItem key={index} value={group.name}>{group.name}</MenuItem>\r\n                                }\r\n                            })}\r\n                        </Select>\r\n                    </StyledFormControl>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button variant=\"outlined\" onClick={() => {\r\n                        addLink(linkName, linkHref, groupName)\r\n                        handleClose()\r\n                    }} color=\"primary\">\r\n                        Add Link\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    )\r\n}\r\n\r\n",{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":15,"column":22,"nodeType":"56","messageId":"57","endLine":15,"endColumn":30},{"ruleId":"54","severity":1,"message":"58","line":20,"column":8,"nodeType":"56","messageId":"57","endLine":20,"endColumn":16},{"ruleId":"54","severity":1,"message":"59","line":21,"column":8,"nodeType":"56","messageId":"57","endLine":21,"endColumn":14},{"ruleId":"54","severity":1,"message":"60","line":22,"column":8,"nodeType":"56","messageId":"57","endLine":22,"endColumn":14},{"ruleId":"54","severity":1,"message":"61","line":23,"column":8,"nodeType":"56","messageId":"57","endLine":23,"endColumn":19},{"ruleId":"54","severity":1,"message":"62","line":24,"column":8,"nodeType":"56","messageId":"57","endLine":24,"endColumn":21},{"ruleId":"54","severity":1,"message":"63","line":26,"column":8,"nodeType":"56","messageId":"57","endLine":26,"endColumn":21},{"ruleId":"54","severity":1,"message":"64","line":27,"column":8,"nodeType":"56","messageId":"57","endLine":27,"endColumn":18},{"ruleId":"54","severity":1,"message":"65","line":28,"column":8,"nodeType":"56","messageId":"57","endLine":28,"endColumn":14},{"ruleId":"54","severity":1,"message":"66","line":36,"column":5,"nodeType":"56","messageId":"57","endLine":36,"endColumn":22},{"ruleId":"54","severity":1,"message":"67","line":68,"column":45,"nodeType":"56","messageId":"57","endLine":68,"endColumn":52},{"ruleId":"54","severity":1,"message":"68","line":69,"column":11,"nodeType":"56","messageId":"57","endLine":69,"endColumn":18},{"ruleId":"69","severity":1,"message":"70","line":78,"column":8,"nodeType":"71","endLine":78,"endColumn":10,"suggestions":"72"},{"ruleId":"73","severity":1,"message":"74","line":181,"column":35,"nodeType":"75","messageId":"76","endLine":181,"endColumn":37},{"ruleId":"73","severity":1,"message":"77","line":62,"column":56,"nodeType":"75","messageId":"76","endLine":62,"endColumn":58},"no-native-reassign",["78"],"no-negated-in-lhs",["79"],"no-unused-vars","'useTheme' is defined but never used.","Identifier","unusedVar","'MenuItem' is defined but never used.","'Button' is defined but never used.","'Dialog' is defined but never used.","'DialogTitle' is defined but never used.","'DialogContent' is defined but never used.","'DialogActions' is defined but never used.","'InputLabel' is defined but never used.","'Select' is defined but never used.","'StyledFormControl' is defined but never used.","'addLink' is assigned a value but never used.","'classes' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setLinks'. Either include it or remove the dependency array.","ArrayExpression",["80"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.map() expects a value to be returned at the end of arrow function.","no-global-assign","no-unsafe-negation",{"desc":"81","fix":"82"},"Update the dependencies array to be: [setLinks]",{"range":"83","text":"84"},[2638,2640],"[setLinks]"]